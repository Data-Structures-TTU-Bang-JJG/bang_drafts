// Function used by the "good guys" to "shoot" the "bad guys" within the range specified by the dices
void goodGuys_shooting(struct stack dice_stack, int range, int current){
    while(isEmpty(&dice_stack) == false)
    {
        // Check what is the range
        // If range of shooting is 1
        if(range == 1)
        {
            
            // If the suspicion of the player on the left is lower than the one 
            // on the right
            if(suspicion[lineup.data[current].next] < suspicion[lineup.data[current].previous])
            {
                // Shoot the player to the left (-1 health)
                lineup.data[lineup.data[current].next].bullets--; 
                cout << print_player_name(lineup.data[lineup.data[current].next].name) << " shot!!!" << endl;
		// Player shot a "bad guy", increase suspicion
		suspicion[current] = suspicion[current] + 1; 
            }
            
            // Else if the suspicion of the player on the right is lower than 
            // the one on the left
            else if(suspicion[lineup.data[current].next] >= suspicion[lineup.data[current].previous])
            {
                // Shoot the player to the right (-1 health)
                lineup.data[lineup.data[current].previous].bullets--;
                cout << print_player_name(lineup.data[lineup.data[current].previous].name) << " was shot!!!" << endl;
		// Player shot a "bad guy", increase suspicion
		suspicion[current] = suspicion[current] + 1;
            }
        }
        
        // If range of shooting is 2
        if(range == 2)
        {
            // If the suspicion of the player two spaces to the left is lower than
            // the one two spaces to the right
            if(suspicion[lineup.data[lineup.data[current].next].next] < suspicion[lineup.data[lineup.data[current].previous].previous])
            {
                // Shoot the player two positions to the left (-1 health)
                lineup.data[lineup.data[lineup.data[current].next].next].bullets--;
                cout << print_player_name(lineup.data[lineup.data[lineup.data[current].next].next].name) << " was shot!!!" << endl;
		// Player shot a "bad guy", increase suspicion
		suspicion[current] = suspicion[current] + 1;
            }
            
            // If the suspicion of the player two spaces to the right is lower than
            // the one two spaces to the left
            else if(suspicion[lineup.data[lineup.data[current].next].next] >= suspicion[lineup.data[lineup.data[current].previous].previous])
            {
                // Shoot the player two positions to the right (-1 health)
                lineup.data[lineup.data[lineup.data[current].previous].previous].bullets--;
                cout << print_player_name(lineup.data[lineup.data[lineup.data[current].previous].previous].name) << " was shot !!!" << endl;
		// Player shot a "bad guy", increase suspicion
		suspicion[current] = suspicion[current] + 1;
            }
        }
        
		check_Death(lineup.data[current].next,current,0);
        // Call this function recursively
        goodGuys_shooting(dice_stack,pop(&dice_stack), current);
    }
    
    // If the stack is empty then return
    return;
} // End goodGuys_shooting

// Function used by the "bad guys" to "shoot" the "good guys" within the range specified by the dices
void badGuys_shooting(struct stack dice_stack, int range, int current){
    while(isEmpty(&dice_stack) == false)
    {
        // Check what is the range
        // If range of shooting is 1
        if(range == 1)
        {
            
            // If the suspicion of the player on the left is higher than the one 
            // on the right
            if(suspicion[lineup.data[current].next] > suspicion[lineup.data[current].previous])
            {
                // Shoot the player to the left (-1 health)
                lineup.data[lineup.data[current].next].bullets--; 
                cout << print_player_name(lineup.data[lineup.data[current].next].name) << " was shot!!!" << endl;
	        // Player shot a "good guy", decrease suspicion
		suspicion[current] = suspicion[current] - 1;
            }
            
            // Else if the suspicion of the player on the right is higher than 
            // the one on the left
            else if(suspicion[lineup.data[current].next] <= suspicion[lineup.data[current].previous])
            {
                // Shoot the player to the right (-1 health)
                lineup.data[lineup.data[current].previous].bullets--;
                cout << print_player_name(lineup.data[lineup.data[current].previous].name) << " was shot!!!" << endl;
		// Player shot a "good guy", decrease suspicion
		suspicion[current] = suspicion[current] - 1;
            }
        }
        
        // If range of shooting is 2
        if(range == 2)
        {
            // If the suspicion of the player two spaces to the left is higher than
            // the one two spaces to the right
            if(suspicion[lineup.data[lineup.data[current].next].next] > suspicion[lineup.data[lineup.data[current].previous].previous])
            {
                // Shoot the player two positions to the left (-1 health)
                lineup.data[lineup.data[lineup.data[current].next].next].bullets--;
                cout << print_player_name(lineup.data[lineup.data[lineup.data[current].next].next].name) << " was shot!!!" << endl;
		// Player shot a "good guy", decrease suspicion
		suspicion[current] = suspicion[current] - 1;
            }
            
            // If the suspicion of the player two spaces to the right is higher than
            // the one two spaces to the left
            else if(suspicion[lineup.data[lineup.data[current].next].next] <= suspicion[lineup.data[lineup.data[current].previous].previous])
            {
                // Shoot the player two positions to the right (-1 health)
                lineup.data[lineup.data[lineup.data[current].previous].previous].bullets--;
                cout << print_player_name(lineup.data[lineup.data[lineup.data[current].previous].previous].name) << " was shot !!!" << endl;
		// Player shot a "good guy", decrease suspicion
	        suspicion[current] = suspicion[current] - 1;
            }
        }
        check_Death(lineup.data[current].next,current,0);
        // Call this function recursively
        badGuys_shooting(dice_stack,pop(&dice_stack), current);
    }
    
    // If the stack is empty then return
    return;
} // End badGuys_shooting

// Function to "shoot" the players within the range specified by the dices
void shooting(struct stack dice_stack, int range, int current){
    while(isEmpty(&dice_stack) == false)
    {
		 // Randomize an integer between 1 or 2
		int position = rand()%2 + 1;
		
        // Check what is the range
        // If range of shooting is 1
        if(range == 1)
        {
            
            // If postion is 1
            if(position == 1)
            {
                // Shoot the player to the left (-1 health)
                lineup.data[lineup.data[current].next].bullets--; 
                cout << print_player_name(lineup.data[lineup.data[current].next].name) << " was shot!!!" << endl;
            }
            
            // If position is 2
            if(position == 2)
            {
                // Shoot the player to the right (-1 health)
                lineup.data[lineup.data[current].previous].bullets--;
                cout << print_player_name(lineup.data[lineup.data[current].previous].name) << " was shot!!!" << endl;
            }
        }
        
        // If range of shooting is 2
        if(range == 2)
        {
            
            // If position is 1
            if(position == 1)
            {
                // Shoot the player two positions to the left (-1 health)
                lineup.data[lineup.data[lineup.data[current].next].next].bullets--;
                cout << print_player_name(lineup.data[lineup.data[lineup.data[current].next].next].name) << " was shot!!!" << endl;
            }
            
            // if position is 2
            if(position == 2)
            {
                // Shoot the player two positions to the right (-1 health)
                lineup.data[lineup.data[lineup.data[current].previous].previous].bullets--;
                cout << print_player_name(lineup.data[lineup.data[lineup.data[current].previous].previous].name) << " was shot !!!" << endl;
            }
        }
        
        // Call this function recursively
        shooting(dice_stack,pop(&dice_stack), current);
    }
    
    // If the stack is empty then return
    return;
} // End Shooting
